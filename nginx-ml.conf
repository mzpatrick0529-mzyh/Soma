events {
    worker_connections 1024;
}

http {
    # Upstream ML service instances
    upstream ml_backend {
        least_conn;  # Route to instance with fewest connections
        
        server ml-instance-1:8788 max_fails=3 fail_timeout=30s;
        server ml-instance-2:8788 max_fails=3 fail_timeout=30s;
        server ml-instance-3:8788 max_fails=3 fail_timeout=30s;
        
        # Health check
        keepalive 32;
    }
    
    # Rate limiting zone
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr '
                    'response_time: $upstream_response_time '
                    'request_time: $request_time';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # Server block
    server {
        listen 8788;
        server_name localhost;
        
        # Client limits
        client_max_body_size 10M;
        client_body_timeout 60s;
        client_header_timeout 60s;
        
        # Rate limiting
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 10;
        
        # Health check endpoint (direct, no proxy)
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint for Prometheus
        location = /metrics {
            proxy_pass http://ml_backend/metrics;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Only allow Prometheus server
            allow 172.16.0.0/12;  # Docker network
            deny all;
        }
        
        # ML API endpoints
        location / {
            # Proxy to backend
            proxy_pass http://ml_backend;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # WebSocket support (if needed)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            
            # CORS headers (adjust as needed)
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # Reasoning API
        location /reasoning/ {
            proxy_pass http://ml_backend/reasoning/;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 90s;  # Longer timeout for reasoning
        }
        
        # Values API
        location /values/ {
            proxy_pass http://ml_backend/values/;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
        }
        
        # Emotions API
        location /emotions/ {
            proxy_pass http://ml_backend/emotions/;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
        }
        
        # Theory of Mind API
        location /tom/ {
            proxy_pass http://ml_backend/tom/;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 60s;
        }
        
        # Narrative API
        location /narrative/ {
            proxy_pass http://ml_backend/narrative/;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 90s;  # Longer timeout for narrative
        }
        
        # Admin endpoints
        location /admin/ {
            proxy_pass http://ml_backend/admin/;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Restrict access (adjust IP as needed)
            allow 172.16.0.0/12;  # Docker network
            allow 127.0.0.1;
            deny all;
            
            proxy_connect_timeout 30s;
            proxy_read_timeout 120s;
        }
        
        # Error pages
        error_page 502 503 504 /502.html;
        location = /502.html {
            return 502 '{"error": "Service temporarily unavailable", "status": 502}\n';
            add_header Content-Type application/json;
        }
    }
}
