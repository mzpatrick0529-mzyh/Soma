import { useState } from 'react';
import { motion } from 'framer-motion';
import { Plus, Search, UserPlus, Users } from 'lucide-react';
import { useAppStore } from '../store/appStore';
import GlassmorphismPopup from '../components/GlassmorphismPopup';

export default function ChatTab() {
  const { chats } = useAppStore();
  const [showChatPopup, setShowChatPopup] = useState(false);

  const chatOptions = [
    { label: 'Add New Contact', icon: <UserPlus size={20} />, onClick: () => console.log('Add contact') },
    { label: 'Create New Group', icon: <Users size={20} />, onClick: () => console.log('Create group') }
  ];

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-lg mx-auto px-4 py-4">
          <div className="flex items-center justify-between mb-3">
            <h1 className="text-2xl font-bold text-gray-900">Chats</h1>
            <button
              onClick={() => setShowChatPopup(true)}
              className="p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <Plus size={24} className="text-gray-700" />
            </button>
          </div>
          
          {/* Search Bar */}
          <div className="relative">
            <Search size={18} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search chats..."
              className="w-full pl-10 pr-4 py-2 bg-gray-100 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Chat List */}
      <div className="max-w-lg mx-auto">
        {chats.map((chat, index) => (
          <motion.button
            key={chat.id}
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: index * 0.05 }}
            className="w-full flex items-center gap-3 px-4 py-3 hover:bg-gray-100 transition-colors border-b border-gray-100"
          >
            {/* Avatar */}
            <div className="relative flex-shrink-0">
              <div className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold ${
                chat.isAI ? 'bg-gradient-to-br from-purple-500 to-pink-500' : 'bg-gradient-to-br from-blue-500 to-cyan-500'
              }`}>
                {chat.name.charAt(0)}
              </div>
              {chat.unread > 0 && (
                <div className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-semibold">
                  {chat.unread}
                </div>
              )}
            </div>

            {/* Chat Info */}
            <div className="flex-1 text-left min-w-0">
              <div className="flex items-center justify-between mb-1">
                <h3 className="font-semibold text-gray-900 truncate flex items-center gap-2">
                  {chat.name}
                  {chat.isAI && (
                    <span className="px-2 py-0.5 bg-purple-100 text-purple-700 text-xs rounded-full font-medium">
                      AI
                    </span>
                  )}
                </h3>
                <span className="text-xs text-gray-500 flex-shrink-0 ml-2">
                  {new Date(chat.timestamp).toLocaleTimeString('en-US', {
                    hour: 'numeric',
                    minute: '2-digit'
                  })}
                </span>
              </div>
              <p className="text-sm text-gray-600 truncate">
                {chat.isGroup && <span className="text-gray-800 font-medium">{chat.lastMessage.split(':')[0]}:</span>}
                {chat.isGroup ? chat.lastMessage.split(':').slice(1).join(':') : chat.lastMessage}
              </p>
            </div>
          </motion.button>
        ))}
      </div>

      {/* Glassmorphism Popup */}
      <GlassmorphismPopup
        isOpen={showChatPopup}
        onClose={() => setShowChatPopup(false)}
        options={chatOptions}
        position="top-right"
      />
    </div>
  );
}
