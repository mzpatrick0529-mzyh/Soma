version: '3.8'

services:
  # TypeScript Backend
  backend:
    build: 
      context: .
      dockerfile: Self_AI_Agent/Dockerfile
    container_name: soma-backend
    ports:
      - "8787:8787"
    environment:
      - NODE_ENV=production
      - ML_SERVICE_URL=http://nginx-lb:8788
      - DATABASE_URL=postgresql://soma_user:${DB_PASSWORD}@postgres:5432/soma
    depends_on:
      - nginx-lb
      - postgres
    networks:
      - soma-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: soma-nginx-lb
    ports:
      - "8788:8788"
    volumes:
      - ./nginx-ml.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ml-instance-1
      - ml-instance-2
      - ml-instance-3
    networks:
      - soma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8788/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ML Service Instance 1
  ml-instance-1:
    build:
      context: ./Self_AI_Agent/src/ml
      dockerfile: Dockerfile
    container_name: soma-ml-1
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://soma_user:${DB_PASSWORD}@postgres:5432/soma
      - INSTANCE_ID=1
      - PORT=8788
    depends_on:
      - redis
      - postgres
    networks:
      - soma-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4GB
        reservations:
          cpus: '1.0'
          memory: 2GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8788/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service Instance 2
  ml-instance-2:
    build:
      context: ./Self_AI_Agent/src/ml
      dockerfile: Dockerfile
    container_name: soma-ml-2
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://soma_user:${DB_PASSWORD}@postgres:5432/soma
      - INSTANCE_ID=2
      - PORT=8788
    depends_on:
      - redis
      - postgres
    networks:
      - soma-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4GB
        reservations:
          cpus: '1.0'
          memory: 2GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8788/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Service Instance 3
  ml-instance-3:
    build:
      context: ./Self_AI_Agent/src/ml
      dockerfile: Dockerfile
    container_name: soma-ml-3
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://soma_user:${DB_PASSWORD}@postgres:5432/soma
      - INSTANCE_ID=3
      - PORT=8788
    depends_on:
      - redis
      - postgres
    networks:
      - soma-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4GB
        reservations:
          cpus: '1.0'
          memory: 2GB
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8788/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: soma-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - soma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: soma-postgres
    environment:
      - POSTGRES_DB=soma
      - POSTGRES_USER=soma_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./Self_AI_Agent/src/ml/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - soma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soma_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Knowledge Graph
  neo4j:
    image: neo4j:5.14-community
    container_name: soma-neo4j
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2g
      - NEO4J_dbms_memory_pagecache_size=1g
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    networks:
      - soma-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: soma-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - soma-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: soma-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/soma.json:ro
    depends_on:
      - prometheus
    networks:
      - soma-network
    restart: unless-stopped

networks:
  soma-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
  prometheus-data:
  grafana-data:
